<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: match/LeaderBoard.proto

namespace App\Proto {

  class LeaderBoard extends \DrSlump\Protobuf\Message {

    /**  @var \App\Proto\User */
    public $user = null;
    
    /**  @var \App\Proto\Wave */
    public $wave = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'App.Proto.LeaderBoard');

      // REQUIRED MESSAGE user = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "user";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\App\Proto\User';
      $descriptor->addField($f);

      // REQUIRED MESSAGE wave = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "wave";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\App\Proto\Wave';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <user> has a value
     *
     * @return boolean
     */
    public function hasUser(){
      return $this->_has(1);
    }
    
    /**
     * Clear <user> value
     *
     * @return \App\Proto\LeaderBoard
     */
    public function clearUser(){
      return $this->_clear(1);
    }
    
    /**
     * Get <user> value
     *
     * @return \App\Proto\User
     */
    public function getUser(){
      return $this->_get(1);
    }
    
    /**
     * Set <user> value
     *
     * @param \App\Proto\User $value
     * @return \App\Proto\LeaderBoard
     */
    public function setUser(\App\Proto\User $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <wave> has a value
     *
     * @return boolean
     */
    public function hasWave(){
      return $this->_has(2);
    }
    
    /**
     * Clear <wave> value
     *
     * @return \App\Proto\LeaderBoard
     */
    public function clearWave(){
      return $this->_clear(2);
    }
    
    /**
     * Get <wave> value
     *
     * @return \App\Proto\Wave
     */
    public function getWave(){
      return $this->_get(2);
    }
    
    /**
     * Set <wave> value
     *
     * @param \App\Proto\Wave $value
     * @return \App\Proto\LeaderBoard
     */
    public function setWave(\App\Proto\Wave $value){
      return $this->_set(2, $value);
    }
  }
}

