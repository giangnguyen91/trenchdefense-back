<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: zombie/Zombie.proto

namespace App\Proto {

  class Zombie extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $damage = null;
    
    /**  @var int */
    public $hp = null;
    
    /**  @var int */
    public $speed = null;
    
    /**  @var int */
    public $attack = null;
    
    /**  @var int */
    public $dropGold = null;
    
    /**  @var string */
    public $resourceID = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'App.Proto.Zombie');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED UINT32 damage = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "damage";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED UINT32 hp = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "hp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED UINT32 speed = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "speed";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED UINT32 attack = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "attack";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED UINT32 dropGold = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "dropGold";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING resourceID = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "resourceID";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \App\Proto\Zombie
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \App\Proto\Zombie
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <damage> has a value
     *
     * @return boolean
     */
    public function hasDamage(){
      return $this->_has(2);
    }
    
    /**
     * Clear <damage> value
     *
     * @return \App\Proto\Zombie
     */
    public function clearDamage(){
      return $this->_clear(2);
    }
    
    /**
     * Get <damage> value
     *
     * @return int
     */
    public function getDamage(){
      return $this->_get(2);
    }
    
    /**
     * Set <damage> value
     *
     * @param int $value
     * @return \App\Proto\Zombie
     */
    public function setDamage( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <hp> has a value
     *
     * @return boolean
     */
    public function hasHp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <hp> value
     *
     * @return \App\Proto\Zombie
     */
    public function clearHp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <hp> value
     *
     * @return int
     */
    public function getHp(){
      return $this->_get(3);
    }
    
    /**
     * Set <hp> value
     *
     * @param int $value
     * @return \App\Proto\Zombie
     */
    public function setHp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <speed> has a value
     *
     * @return boolean
     */
    public function hasSpeed(){
      return $this->_has(4);
    }
    
    /**
     * Clear <speed> value
     *
     * @return \App\Proto\Zombie
     */
    public function clearSpeed(){
      return $this->_clear(4);
    }
    
    /**
     * Get <speed> value
     *
     * @return int
     */
    public function getSpeed(){
      return $this->_get(4);
    }
    
    /**
     * Set <speed> value
     *
     * @param int $value
     * @return \App\Proto\Zombie
     */
    public function setSpeed( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <attack> has a value
     *
     * @return boolean
     */
    public function hasAttack(){
      return $this->_has(5);
    }
    
    /**
     * Clear <attack> value
     *
     * @return \App\Proto\Zombie
     */
    public function clearAttack(){
      return $this->_clear(5);
    }
    
    /**
     * Get <attack> value
     *
     * @return int
     */
    public function getAttack(){
      return $this->_get(5);
    }
    
    /**
     * Set <attack> value
     *
     * @param int $value
     * @return \App\Proto\Zombie
     */
    public function setAttack( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <dropGold> has a value
     *
     * @return boolean
     */
    public function hasDropGold(){
      return $this->_has(6);
    }
    
    /**
     * Clear <dropGold> value
     *
     * @return \App\Proto\Zombie
     */
    public function clearDropGold(){
      return $this->_clear(6);
    }
    
    /**
     * Get <dropGold> value
     *
     * @return int
     */
    public function getDropGold(){
      return $this->_get(6);
    }
    
    /**
     * Set <dropGold> value
     *
     * @param int $value
     * @return \App\Proto\Zombie
     */
    public function setDropGold( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <resourceID> has a value
     *
     * @return boolean
     */
    public function hasResourceID(){
      return $this->_has(7);
    }
    
    /**
     * Clear <resourceID> value
     *
     * @return \App\Proto\Zombie
     */
    public function clearResourceID(){
      return $this->_clear(7);
    }
    
    /**
     * Get <resourceID> value
     *
     * @return string
     */
    public function getResourceID(){
      return $this->_get(7);
    }
    
    /**
     * Set <resourceID> value
     *
     * @param string $value
     * @return \App\Proto\Zombie
     */
    public function setResourceID( $value){
      return $this->_set(7, $value);
    }
  }
}

