<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: auth/Authenticate.proto

namespace App\Proto {

  class Authenticate extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $access_token = null;
    
    /**  @var int */
    public $expired_at = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'App.Proto.Authenticate');

      // REQUIRED STRING access_token = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "access_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED UINT32 expired_at = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "expired_at";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <access_token> has a value
     *
     * @return boolean
     */
    public function hasAccessToken(){
      return $this->_has(1);
    }
    
    /**
     * Clear <access_token> value
     *
     * @return \App\Proto\Authenticate
     */
    public function clearAccessToken(){
      return $this->_clear(1);
    }
    
    /**
     * Get <access_token> value
     *
     * @return string
     */
    public function getAccessToken(){
      return $this->_get(1);
    }
    
    /**
     * Set <access_token> value
     *
     * @param string $value
     * @return \App\Proto\Authenticate
     */
    public function setAccessToken( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <expired_at> has a value
     *
     * @return boolean
     */
    public function hasExpiredAt(){
      return $this->_has(2);
    }
    
    /**
     * Clear <expired_at> value
     *
     * @return \App\Proto\Authenticate
     */
    public function clearExpiredAt(){
      return $this->_clear(2);
    }
    
    /**
     * Get <expired_at> value
     *
     * @return int
     */
    public function getExpiredAt(){
      return $this->_get(2);
    }
    
    /**
     * Set <expired_at> value
     *
     * @param int $value
     * @return \App\Proto\Authenticate
     */
    public function setExpiredAt( $value){
      return $this->_set(2, $value);
    }
  }
}

