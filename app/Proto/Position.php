<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: wave/Position.proto

namespace App\Proto {

  class Position extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $zombieID = null;
    
    /**  @var string */
    public $zombieName = null;
    
    /**  @var int */
    public $total = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'App.Proto.Position');

      // REQUIRED UINT32 zombieID = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "zombieID";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING zombieName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zombieName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED UINT32 total = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "total";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <zombieID> has a value
     *
     * @return boolean
     */
    public function hasZombieID(){
      return $this->_has(1);
    }
    
    /**
     * Clear <zombieID> value
     *
     * @return \App\Proto\Position
     */
    public function clearZombieID(){
      return $this->_clear(1);
    }
    
    /**
     * Get <zombieID> value
     *
     * @return int
     */
    public function getZombieID(){
      return $this->_get(1);
    }
    
    /**
     * Set <zombieID> value
     *
     * @param int $value
     * @return \App\Proto\Position
     */
    public function setZombieID( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zombieName> has a value
     *
     * @return boolean
     */
    public function hasZombieName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zombieName> value
     *
     * @return \App\Proto\Position
     */
    public function clearZombieName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zombieName> value
     *
     * @return string
     */
    public function getZombieName(){
      return $this->_get(2);
    }
    
    /**
     * Set <zombieName> value
     *
     * @param string $value
     * @return \App\Proto\Position
     */
    public function setZombieName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal(){
      return $this->_has(3);
    }
    
    /**
     * Clear <total> value
     *
     * @return \App\Proto\Position
     */
    public function clearTotal(){
      return $this->_clear(3);
    }
    
    /**
     * Get <total> value
     *
     * @return int
     */
    public function getTotal(){
      return $this->_get(3);
    }
    
    /**
     * Set <total> value
     *
     * @param int $value
     * @return \App\Proto\Position
     */
    public function setTotal( $value){
      return $this->_set(3, $value);
    }
  }
}

