<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: weapon/master/Weapon.proto

namespace App\Proto {

  class Weapon extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var \App\Proto\WeaponGroup */
    public $group = null;
    
    /**  @var int */
    public $damage = null;
    
    /**  @var string */
    public $resourceId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'App.Proto.Weapon');

      // REQUIRED UINT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE group = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "group";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\App\Proto\WeaponGroup';
      $descriptor->addField($f);

      // REQUIRED UINT32 damage = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "damage";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING resourceId = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "resourceId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \App\Proto\Weapon
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \App\Proto\Weapon
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \App\Proto\Weapon
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \App\Proto\Weapon
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <group> has a value
     *
     * @return boolean
     */
    public function hasGroup(){
      return $this->_has(3);
    }
    
    /**
     * Clear <group> value
     *
     * @return \App\Proto\Weapon
     */
    public function clearGroup(){
      return $this->_clear(3);
    }
    
    /**
     * Get <group> value
     *
     * @return \App\Proto\WeaponGroup
     */
    public function getGroup(){
      return $this->_get(3);
    }
    
    /**
     * Set <group> value
     *
     * @param \App\Proto\WeaponGroup $value
     * @return \App\Proto\Weapon
     */
    public function setGroup(\App\Proto\WeaponGroup $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <damage> has a value
     *
     * @return boolean
     */
    public function hasDamage(){
      return $this->_has(4);
    }
    
    /**
     * Clear <damage> value
     *
     * @return \App\Proto\Weapon
     */
    public function clearDamage(){
      return $this->_clear(4);
    }
    
    /**
     * Get <damage> value
     *
     * @return int
     */
    public function getDamage(){
      return $this->_get(4);
    }
    
    /**
     * Set <damage> value
     *
     * @param int $value
     * @return \App\Proto\Weapon
     */
    public function setDamage( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <resourceId> has a value
     *
     * @return boolean
     */
    public function hasResourceId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <resourceId> value
     *
     * @return \App\Proto\Weapon
     */
    public function clearResourceId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <resourceId> value
     *
     * @return string
     */
    public function getResourceId(){
      return $this->_get(5);
    }
    
    /**
     * Set <resourceId> value
     *
     * @param string $value
     * @return \App\Proto\Weapon
     */
    public function setResourceId( $value){
      return $this->_set(5, $value);
    }
  }
}

