<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: character/CharacterStatus.proto

namespace App\Proto {

  class CharacterStatus extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $dropGold = null;
    
    /**  @var int */
    public $currentHp = null;
    
    /**  @var \App\Proto\Character */
    public $character = null;
    
    /**  @var \App\Proto\Weapon[]  */
    public $weapons = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'App.Proto.CharacterStatus');

      // REQUIRED UINT32 dropGold = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "dropGold";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED UINT32 currentHp = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "currentHp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE character = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "character";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\App\Proto\Character';
      $descriptor->addField($f);

      // REPEATED MESSAGE weapons = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "weapons";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\App\Proto\Weapon';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <dropGold> has a value
     *
     * @return boolean
     */
    public function hasDropGold(){
      return $this->_has(1);
    }
    
    /**
     * Clear <dropGold> value
     *
     * @return \App\Proto\CharacterStatus
     */
    public function clearDropGold(){
      return $this->_clear(1);
    }
    
    /**
     * Get <dropGold> value
     *
     * @return int
     */
    public function getDropGold(){
      return $this->_get(1);
    }
    
    /**
     * Set <dropGold> value
     *
     * @param int $value
     * @return \App\Proto\CharacterStatus
     */
    public function setDropGold( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <currentHp> has a value
     *
     * @return boolean
     */
    public function hasCurrentHp(){
      return $this->_has(2);
    }
    
    /**
     * Clear <currentHp> value
     *
     * @return \App\Proto\CharacterStatus
     */
    public function clearCurrentHp(){
      return $this->_clear(2);
    }
    
    /**
     * Get <currentHp> value
     *
     * @return int
     */
    public function getCurrentHp(){
      return $this->_get(2);
    }
    
    /**
     * Set <currentHp> value
     *
     * @param int $value
     * @return \App\Proto\CharacterStatus
     */
    public function setCurrentHp( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <character> has a value
     *
     * @return boolean
     */
    public function hasCharacter(){
      return $this->_has(3);
    }
    
    /**
     * Clear <character> value
     *
     * @return \App\Proto\CharacterStatus
     */
    public function clearCharacter(){
      return $this->_clear(3);
    }
    
    /**
     * Get <character> value
     *
     * @return \App\Proto\Character
     */
    public function getCharacter(){
      return $this->_get(3);
    }
    
    /**
     * Set <character> value
     *
     * @param \App\Proto\Character $value
     * @return \App\Proto\CharacterStatus
     */
    public function setCharacter(\App\Proto\Character $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <weapons> has a value
     *
     * @return boolean
     */
    public function hasWeapons(){
      return $this->_has(4);
    }
    
    /**
     * Clear <weapons> value
     *
     * @return \App\Proto\CharacterStatus
     */
    public function clearWeapons(){
      return $this->_clear(4);
    }
    
    /**
     * Get <weapons> value
     *
     * @param int $idx
     * @return \App\Proto\Weapon
     */
    public function getWeapons($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <weapons> value
     *
     * @param \App\Proto\Weapon $value
     * @return \App\Proto\CharacterStatus
     */
    public function setWeapons(\App\Proto\Weapon $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <weapons>
     *
     * @return \App\Proto\Weapon[]
     */
    public function getWeaponsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <weapons>
     *
     * @param \App\Proto\Weapon $value
     * @return \App\Proto\CharacterStatus
     */
    public function addWeapons(\App\Proto\Weapon $value){
     return $this->_add(4, $value);
    }
  }
}

