<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: auth/AuthenticateParameter.proto

namespace App\Proto {

  class AuthenticateParameter extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $access_code = null;
    
    /**  @var string */
    public $imei = null;
    
    /**  @var \App\Proto\Type */
    public $login_type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'App.Proto.AuthenticateParameter');

      // OPTIONAL STRING access_code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "access_code";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING imei = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "imei";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED MESSAGE login_type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "login_type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\App\Proto\Type';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <access_code> has a value
     *
     * @return boolean
     */
    public function hasAccessCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <access_code> value
     *
     * @return \App\Proto\AuthenticateParameter
     */
    public function clearAccessCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <access_code> value
     *
     * @return string
     */
    public function getAccessCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <access_code> value
     *
     * @param string $value
     * @return \App\Proto\AuthenticateParameter
     */
    public function setAccessCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <imei> has a value
     *
     * @return boolean
     */
    public function hasImei(){
      return $this->_has(2);
    }
    
    /**
     * Clear <imei> value
     *
     * @return \App\Proto\AuthenticateParameter
     */
    public function clearImei(){
      return $this->_clear(2);
    }
    
    /**
     * Get <imei> value
     *
     * @return string
     */
    public function getImei(){
      return $this->_get(2);
    }
    
    /**
     * Set <imei> value
     *
     * @param string $value
     * @return \App\Proto\AuthenticateParameter
     */
    public function setImei( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <login_type> has a value
     *
     * @return boolean
     */
    public function hasLoginType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <login_type> value
     *
     * @return \App\Proto\AuthenticateParameter
     */
    public function clearLoginType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <login_type> value
     *
     * @return \App\Proto\Type
     */
    public function getLoginType(){
      return $this->_get(3);
    }
    
    /**
     * Set <login_type> value
     *
     * @param \App\Proto\Type $value
     * @return \App\Proto\AuthenticateParameter
     */
    public function setLoginType(\App\Proto\Type $value){
      return $this->_set(3, $value);
    }
  }
}

