<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: wave/ZombiePosition.proto

namespace App\Proto {

  class ZombiePosition extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $position = null;
    
    /**  @var \App\Proto\Zombie */
    public $zombie = null;
    
    /**  @var int */
    public $time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'App.Proto.ZombiePosition');

      // REQUIRED UINT32 position = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE zombie = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zombie";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\App\Proto\Zombie';
      $descriptor->addField($f);

      // REQUIRED UINT32 time = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(1);
    }
    
    /**
     * Clear <position> value
     *
     * @return \App\Proto\ZombiePosition
     */
    public function clearPosition(){
      return $this->_clear(1);
    }
    
    /**
     * Get <position> value
     *
     * @return int
     */
    public function getPosition(){
      return $this->_get(1);
    }
    
    /**
     * Set <position> value
     *
     * @param int $value
     * @return \App\Proto\ZombiePosition
     */
    public function setPosition( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zombie> has a value
     *
     * @return boolean
     */
    public function hasZombie(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zombie> value
     *
     * @return \App\Proto\ZombiePosition
     */
    public function clearZombie(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zombie> value
     *
     * @return \App\Proto\Zombie
     */
    public function getZombie(){
      return $this->_get(2);
    }
    
    /**
     * Set <zombie> value
     *
     * @param \App\Proto\Zombie $value
     * @return \App\Proto\ZombiePosition
     */
    public function setZombie(\App\Proto\Zombie $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <time> value
     *
     * @return \App\Proto\ZombiePosition
     */
    public function clearTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \App\Proto\ZombiePosition
     */
    public function setTime( $value){
      return $this->_set(3, $value);
    }
  }
}

